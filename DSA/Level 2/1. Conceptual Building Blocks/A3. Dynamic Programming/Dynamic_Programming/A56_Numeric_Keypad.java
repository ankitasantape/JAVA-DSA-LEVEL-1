/*
1. You are given a number N, which represents the count of buttons pressed on a mobile numeric keypad.
2. You can only press buttons that are up, left, right, down to the current button and the current button also.
3. You can not press bottom row corner buttons(* and #).

4. You have to find the count of different numbers that can be generated by pressing N number of buttons.
Input Format
A number N
Output Format
Constraints
1 <= N <= 30
Sample Input
2
Sample Output
36

*/
package Dynamic_Programming;


import java.util.Scanner;

public class A56_Numeric_Keypad {
   
	public static int solution(int n) {
		int[][] dp = new int[n + 1][10];
	
		int[][] data =  {  
				{0, 8},
				{1, 2, 4},
				{1, 2, 3, 5},
				{2, 3, 6},
				{1, 4, 5, 7},
				{2, 4, 5, 6, 8 },
				{3, 5, 6, 9 },
				{4, 7, 8 },
				{5, 7, 8, 9, 0 },
				{6, 8, 9 },
		};
        for(int i = 1; i <= n; i++) {
        	for(int j = 0; j <= 9; j++) {
        		if(i == 1) {
        			dp[i][j] = 1;
        		} else {
        			// ith press for jth key -> (i - 1)th press should of keys in data[j]
        			for(int prev : data[j]) {
        				dp[i][j] += dp[i - 1][prev];
        			}
        		}
        	}
        }
        int sum = 0;
        for (int j = 0; j <= 9; j++) {
        	sum += dp[n][j];
        }
        
		return sum;
	}
	public static void main(String[] args) {
		Scanner scn = new Scanner(System.in);
		System.out.println(solution(scn.nextInt()));
		scn.close();
	}
}
